{"version":3,"sources":["src/reforges.ts","src/accessoryBag.ts","src/main.ts"],"names":[],"mappings":";;;;;;;;;;;;;IAAa;AAGT,mBAAmB,MAAnB,EAA0C,IAA1C,EAA+D,GAA/D,EAAmF,EAAnF,EAA+F,MAA/F,EAA8G;AAAA;;AAA3F,SAAA,MAAA,GAAA,MAAA;AAAuB,SAAA,IAAA,GAAA,IAAA;ACH9C,ADGmE,ICHnE,KDGmE,GAAA,ECHnE,CDGmE,ECHnE,CDGmE,MCHnE,CAAA,YAAA,CAAA;ADGuF,SAAA,EAAA,GAAA,EAAA;ACFvF,ADGQ,ICHR,KDGa,CCHb,GAAA,EDGQ,GAAc,ECHtB,CAAA,GDG4B,KCH5B,ADGiC,CCHjC,QDGsB,GAAuB,CAAvB,GAA2B,MAAzC;AACH;AELL,IDea,ACfb,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;ADkBI,wBAAmB,EAAnB,EAAoC;AAAA,ACjBxC,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;mCFM0B,OAAe;ACWD,ADXC,IEJ5B,gBAAb,yBAAA;AAAA;ADaI,ADRI,MAAA,GCQJ,EDRS,GAAG,ICQZ,CDRiB,CAAC,CCQD,EAAjB,GDRY,CAAa,UAAA,IAAI;ACWzB,ACfG,AFIsB,ICWzB,EAAE,CAAC,ACfA,KDeH,ACfG,CDeM,ECfuB,AFIH,IEJO,CDepC,CAAiB,CCfe,AFIH,CAAA,CEJ1B,ODee,ADXW,CAAS,ICWrB,CDXyB,CCWjB,ADXkB,MCW1B,ADXY,ECWM,ADV9B,MADwB,CACjB,UAAA,OAAO;ACWf,ACfX,AFI0B,UCWX,MAAM,CDXS,ECWN,KDXa,CAAC,ICWd,ADXM,CCWN,IDXuB,IAArB,GCWF,CAAY,YAAZ,EAA0B,MAA1B,CAAb,CAD+B,CAG/B;ADbe,SADU,EAExB,MAFwB,GAEf,CAFW;ACerB,ACpBZ,AFKiC,MCerB,CCpBZ,AFKgB,CELhB,AFKQ,GCeQ,CAAC,SAAL,ACpBZ,CDoB2B,ECpB3B,IDoBY,IAAyB,EAAzB,GCpBZ;AAIA,AFMQ,QENA,CAAC,IFMM,KAAK,CAAC,MENrB,AFMe,CENW,AFME,UAAA,IAAI,IENhC,EAA8C,YAAA;ADiBlC,ACjBkC,AFMd,WCWf,IAAI,ADXe,CCWd,GAAG,ADXe,CCW5B,EAAgB,CAAC,ADXe,GCWZ,ED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","file":"main.b0a109ad.js","sourceRoot":"..","sourcesContent":["export class Reforge {\r\n    public atkspd: number;\r\n\r\n    constructor(public rarity: string, public name: string, public str: number, public cd: number, atkSpd?: number) {\r\n        this.atkspd = atkSpd === undefined ? 0 : atkSpd;\r\n    }\r\n\r\n    public shiftWithMoves(moves: string[]): Reforge[] {\r\n        moves = moves.filter(name => REFORGES[this.rarity]\r\n            .filter(reforge => reforge.name === name)\r\n            .length > 0\r\n        );\r\n\r\n        return moves.filter(name => name != this.name)\r\n            .map(name => getReforge(this.rarity, name));\r\n    }\r\n\r\n    public shift(moveSet: string): Reforge[] {\r\n        let moves = MOVE_SETS[moveSet]\r\n\r\n        return this.shiftWithMoves(moves);\r\n    }\r\n}\r\n\r\nexport const MOVE_SETS = [\"Hurtful\", \"Strong\", \"Forceful\"];\r\n\r\nexport const PREPOPULATE = {\r\n    \"Max Damage\": {\r\n        \"COMMON\": [\"Hurtful\"],\r\n        \"UNCOMMON\": [\"Hurtful\"],\r\n        \"RARE\": [\"Hurtful\"],\r\n        \"EPIC\": [\"Strong\"],\r\n        \"LEGENDARY\": [\"Strong\"],\r\n        \"MYTHIC\": [\"Strong\"],\r\n    }\r\n};\r\n\r\nexport const RARITIES = [\"COMMON\", \"UNCOMMON\", \"RARE\", \"EPIC\", \"LEGENDARY\", \"MYTHIC\"];\r\n\r\nexport const REFORGES = {\r\n    \"COMMON\": [\r\n        new Reforge(\"COMMON\", \"Silky\", 0, 5),\r\n        new Reforge(\"COMMON\", \"Hurtful\", 0, 4),\r\n        new Reforge(\"COMMON\", \"Bloody\", 1, 3, 1),\r\n        new Reforge(\"COMMON\", \"Forceful\", 4, 0),\r\n    ],\r\n    \"UNCOMMON\": [\r\n        new Reforge(\"UNCOMMON\", \"Silky\", 0, 6),\r\n        new Reforge(\"UNCOMMON\", \"Hurtful\", 0, 5),\r\n        new Reforge(\"UNCOMMON\", \"Bloody\", 1, 4, 1),\r\n        new Reforge(\"UNCOMMON\", \"Strange\", 1, 2, 2),\r\n        new Reforge(\"UNCOMMON\", \"Forceful\", 5, 0)\r\n    ],\r\n    \"RARE\": [\r\n        new Reforge(\"RARE\", \"Silky\", 0, 8),\r\n        new Reforge(\"RARE\", \"Hurtful\", 0, 7),\r\n        new Reforge(\"RARE\", \"Bloody\", 1, 5, 1),\r\n        new Reforge(\"RARE\", \"Forceful\", 7, 0)\r\n    ],\r\n    \"EPIC\": [\r\n        new Reforge(\"EPIC\", \"Silky\", 0, 10),\r\n        new Reforge(\"EPIC\", \"Hurtful\", 0, 10),\r\n        new Reforge(\"EPIC\", \"Bloody\", 2, 6, 2),\r\n        new Reforge(\"EPIC\", \"Strong\", 5, 5),\r\n        new Reforge(\"EPIC\", \"Strange\", 3, 1, 4),\r\n        new Reforge(\"EPIC\", \"Forceful\", 10, 0)\r\n    ],\r\n    \"LEGENDARY\": [\r\n        new Reforge(\"LEGENDARY\", \"Silky\", 0, 15),\r\n        new Reforge(\"LEGENDARY\", \"Hurtful\", 0, 15),\r\n        new Reforge(\"LEGENDARY\", \"Bloody\", 3, 9, 2),\r\n        new Reforge(\"LEGENDARY\", \"Strong\", 8, 8),\r\n        new Reforge(\"LEGENDARY\", \"Forceful\", 15, 0)\r\n    ],\r\n    \"MYTHIC\": [\r\n        new Reforge(\"MYTHIC\", \"Silky\", 0, 20),\r\n        new Reforge(\"MYTHIC\", \"Hurtful\", 0, 20),\r\n        new Reforge(\"MYTHIC\", \"Strong\", 12, 12),\r\n        new Reforge(\"MYTHIC\", \"Forceful\", 20, 0)\r\n    ],\r\n};\r\n\r\nexport function getReforge(rarity: string, name: string): Reforge {\r\n    return REFORGES[rarity].filter(reforge => reforge.name === name).pop();\r\n}","import {getReforge, PREPOPULATE, RARITIES, Reforge} from \"./reforges\";\r\nimport {TalismanCount} from \"./main\";\r\n\r\nexport interface Successors {\r\n    bestSuccessors: AccessoryBag[],\r\n    optimal: boolean\r\n}\r\n\r\nexport interface BaseStats {\r\n    dmg: number,\r\n    str: number,\r\n    cd: number,\r\n    atkSpd: number\r\n}\r\n\r\nexport class AccessoryBag {\r\n    talismans: any = {};\r\n\r\n    public constructor(tc: TalismanCount) {\r\n        tc.count.forEach((count, rarity) => {\r\n            let prepop = PREPOPULATE[\"Max Damage\"][rarity];\r\n\r\n            // Typescript is irrationally stupid\r\n            this.talismans[rarity] = [];\r\n            for (let i = 0; i < count; i++) {\r\n                let name = prepop[count % prepop.length];\r\n                this.talismans[rarity].push(getReforge(rarity, name));\r\n            }\r\n        });\r\n    }\r\n\r\n    public generateSuccessors(baseStats: BaseStats, moves: string[]): Successors {\r\n        let successors = [this];\r\n        for (let rarity in this.talismans) {\r\n            if (!this.talismans.hasOwnProperty(rarity)) {\r\n                continue;\r\n            }\r\n\r\n            let pivots = this.scanPivots(rarity);\r\n\r\n            pivots.flatMap(pivot => this.talismans[rarity][pivot].shiftWithMoves(moves)\r\n                .map(reforge => {\r\n                    let newBag = this.clone();\r\n\r\n                    newBag.talismans[rarity][pivot] = reforge;\r\n                    newBag.fixOrdering();\r\n\r\n                    return newBag;\r\n                }))\r\n                .forEach(successor => successors.push(successor));\r\n        }\r\n\r\n        console.log(successors);\r\n\r\n        successors.sort((a, b) => b.evaluate(baseStats).crit - a.evaluate(baseStats).crit);\r\n\r\n        for (let i = 0; i < successors.length; i++) {\r\n            if (successors[i] == this) {\r\n                successors = successors.slice(0, i + 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return {\r\n            bestSuccessors: successors,\r\n            optimal: successors[0] === this\r\n        }\r\n    }\r\n\r\n    scanPivots(rarity: string): number[] {\r\n        let pivots: number[] = [];\r\n\r\n        let reforges = this.talismans[rarity];\r\n        if (reforges.length > 0) {\r\n            pivots.push(0);\r\n            let last = pivots[0];\r\n\r\n            for (let i = 1; i < reforges.length; i++) {\r\n                if (last != pivots[i]) {\r\n                    last = pivots[i];\r\n                    pivots.push(i);\r\n                }\r\n            }\r\n        }\r\n\r\n        return pivots;\r\n    }\r\n\r\n    fixOrdering() {\r\n        for (let i in this.talismans) {\r\n            if (!this.talismans.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n\r\n            let reforges = this.talismans[i];\r\n\r\n            // The only requirement for this sorter is that it's deterministic and groups identical reforges together\r\n            // This is made under the assumption that cd \\in [0,99], str \\in [0,99] and atkspd \\in [0, 99]\r\n            reforges.sort((a, b) => (a.cd - b.cd) * 1e4 +\r\n                (a.str - b.str) * 1e2 +\r\n                a.atkspd * b.atkspd);\r\n        }\r\n    }\r\n\r\n    clone(): AccessoryBag {\r\n        let newBag = new AccessoryBag(new TalismanCount());\r\n\r\n        for (let rarity in this.talismans) {\r\n            if (!this.talismans.hasOwnProperty(rarity)) {\r\n                continue;\r\n            }\r\n\r\n            newBag.talismans[rarity] = this.talismans[rarity].slice(0);\r\n        }\r\n\r\n        return newBag;\r\n    }\r\n\r\n    public evaluate(baseStats: BaseStats): Damage {\r\n        let str = baseStats.str;\r\n        let cd = baseStats.cd;\r\n        let atkSpd = baseStats.atkSpd;\r\n\r\n        for (let i in this.talismans) {\r\n            if (!this.talismans.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n\r\n            this.talismans[i].forEach(reforge => {\r\n                str += reforge.str;\r\n                cd += reforge.cd;\r\n                atkSpd += reforge.atkSpd;\r\n            });\r\n        }\r\n\r\n        let std = (5 + baseStats.dmg + Math.floor(str / 5)) * (1 + str / 100);\r\n        let crit = std + std * (cd / 100);\r\n\r\n        return {\r\n            std: std,\r\n            crit: crit,\r\n            dps: (2 + 2 * Math.min(1, atkSpd / 100)) * crit\r\n        };\r\n    }\r\n\r\n    public toString() {\r\n        return RARITIES.map(rarity => {\r\n            let buffer = rarity + \":\\n\";\r\n            let collected = countReforgeNames(this.talismans[rarity]\r\n                .map(reforge => reforge.name));\r\n\r\n            for (let reforge in collected) {\r\n                if (collected.hasOwnProperty(reforge)) {\r\n                    buffer += \"\\t\" + reforge + \": \" + collected[reforge] + \"\\n\";\r\n                }\r\n            }\r\n\r\n            return buffer;\r\n        })\r\n            .join(\"\");\r\n    }\r\n\r\n    public aggregateReforges(): ReforgeSets[] {\r\n        return RARITIES.map(rarity => {\r\n            return {\r\n                rarity: rarity,\r\n                reforges: countReforgeNames(this.talismans[rarity]\r\n                    .map(reforge => reforge.name))\r\n            };\r\n        });\r\n    }\r\n}\r\n\r\nexport interface ReforgeSets {\r\n    rarity: string,\r\n    reforges: Map<string, number>\r\n}\r\n\r\nfunction countReforgeNames(names: string[]): Map<string, number> {\r\n    let map = new Map();\r\n\r\n    if (names.length > 0) {\r\n        let current = names[0];\r\n        let count = 0;\r\n\r\n        for (let name of names) {\r\n            if (name == current) {\r\n                count++;\r\n            } else {\r\n                map[current] = count;\r\n\r\n                current = name;\r\n                count = 1;\r\n            }\r\n        }\r\n\r\n        map[current] = count;\r\n    }\r\n\r\n    return map;\r\n}\r\n\r\nexport interface Damage {\r\n    std: number,\r\n    crit: number,\r\n    dps: number,\r\n}","import {AccessoryBag, BaseStats, ReforgeSets} from \"./accessoryBag\";\r\nimport {MOVE_SETS, RARITIES} from \"./reforges\";\r\n\r\nexport class TalismanCount {\r\n    public count: Map<string, number> = new Map();\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    for (let rarity of RARITIES) {\r\n        listenTo(rarity.toLowerCase() + \"-talisman-count\");\r\n    }\r\n\r\n    for (let stat of [\"dmg\", \"strength\", \"crit-dmg\", \"attack-speed\"]) {\r\n        listenTo(\"base-\" + stat);\r\n    }\r\n\r\n    for (let reforge of [\"silky\"]) {\r\n        listenTo(\"reforge-stone-\" + reforge);\r\n    }\r\n\r\n    updateMaxCD();\r\n});\r\n\r\nfunction listenTo(inputId: string) {\r\n    let el: HTMLInputElement = document.getElementById(inputId) as HTMLInputElement;\r\n\r\n    el.addEventListener(\"change\", e => updateMaxCD());\r\n}\r\n\r\nfunction updateMaxCD() {\r\n    let [bag, optimal] = evaluateMaxCD();\r\n\r\n    for (let reforgeSet of optimal) {\r\n        let container = document.getElementById(reforgeSet.rarity.toLowerCase() + \"-max-cd-reforge-guide\");\r\n        container.innerText = \"\";\r\n\r\n        for (let reforge in reforgeSet.reforges) {\r\n            if (!reforgeSet.reforges.hasOwnProperty(reforge)) {\r\n                continue;\r\n            }\r\n\r\n            let count = reforgeSet.reforges[reforge];\r\n\r\n            let reforgeEl = document.createElement(\"div\");\r\n            reforgeEl.innerText = reforge + \": \" + count;\r\n\r\n            container.appendChild(reforgeEl);\r\n        }\r\n    }\r\n}\r\n\r\nfunction evaluateMaxCD(): [AccessoryBag, ReforgeSets[]] {\r\n    let moves = MOVE_SETS.slice(0);\r\n    if ((document.getElementById(\"reforge-stone-silky\") as HTMLInputElement).checked) {\r\n        moves.push(\"Silky\");\r\n    }\r\n\r\n\r\n    let bag = new AccessoryBag(getTalismanCount());\r\n    let bs = getBaseStats();\r\n\r\n    for (let i = 0; i < 500; i++) {\r\n        let successors = bag.generateSuccessors(bs, moves);\r\n\r\n        console.log(\"Generation \" + i + \" results:\\n\\n\" + successors.bestSuccessors[0].toString());\r\n        bag = successors.bestSuccessors[Math.floor(Math.random() * successors.bestSuccessors.length)];\r\n\r\n        if (successors.optimal) {\r\n            console.log(\"Optimal solution found after \" + i + \" generations.\");\r\n            return [bag, bag.aggregateReforges()];\r\n        }\r\n    }\r\n\r\n    console.log(\"Took too long to compute, interrupting...\");\r\n    return undefined;\r\n}\r\n\r\nfunction getTalismanCount(): TalismanCount {\r\n    let count = new TalismanCount();\r\n\r\n    for (let rarity of RARITIES) {\r\n        let id = rarity.toLowerCase() + \"-talisman-count\";\r\n        let input = getValueAsUint(id);\r\n\r\n        if (input > 50) {\r\n            input = 50;\r\n            (document.getElementById(id) as HTMLInputElement).value = \"50\";\r\n        }\r\n\r\n        count.count.set(rarity, input)\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nfunction getValueAsUint(elementId: string): number {\r\n    let el = document.getElementById(elementId) as HTMLInputElement;\r\n    let v = el.value as unknown as number;\r\n\r\n    return v > 0 ? +v : 0;\r\n}\r\n\r\nfunction getBaseStats(): BaseStats {\r\n    return {\r\n        dmg: getValueAsUint(\"base-dmg\"),\r\n        str: getValueAsUint(\"base-strength\"),\r\n        cd: getValueAsUint(\"base-crit-dmg\"),\r\n        atkSpd: getValueAsUint(\"base-attack-speed\")\r\n    };\r\n}\r\n"]}