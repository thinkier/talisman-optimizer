{"version":3,"sources":["src/reforges.ts","src/accessoryBag.ts","src/main.ts"],"names":[],"mappings":"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","file":"main.d0ecfc49.js","sourceRoot":"..","sourcesContent":["export class Reforge {\r\n    public atkspd: number;\r\n\r\n    constructor(public rarity: string, public name: string, public str: number, public cd: number, atkSpd?: number) {\r\n        this.atkspd = atkSpd === undefined ? 0 : atkSpd;\r\n    }\r\n\r\n    public shiftWithMoves(moves: string[]): Reforge[] {\r\n        moves = moves.filter(name => REFORGES[this.rarity]\r\n            .filter(reforge => reforge.name === name)\r\n            .length > 0\r\n        );\r\n\r\n        return moves.filter(name => name != this.name)\r\n            .map(name => getReforge(this.rarity, name));\r\n    }\r\n\r\n    public shift(moveSet: string): Reforge[] {\r\n        let moves = MOVE_SETS[moveSet]\r\n\r\n        return this.shiftWithMoves(moves);\r\n    }\r\n}\r\n\r\nexport const MOVE_SETS = [\"Hurtful\", \"Strong\", \"Forceful\"];\r\n\r\nexport const PREPOPULATE = {\r\n    \"Max Damage\": {\r\n        \"COMMON\": [\"Hurtful\"],\r\n        \"UNCOMMON\": [\"Hurtful\"],\r\n        \"RARE\": [\"Hurtful\"],\r\n        \"EPIC\": [\"Strong\"],\r\n        \"LEGENDARY\": [\"Strong\"],\r\n        \"MYTHIC\": [\"Strong\"],\r\n    }\r\n};\r\n\r\nexport const RARITIES = [\"COMMON\", \"UNCOMMON\", \"RARE\", \"EPIC\", \"LEGENDARY\", \"MYTHIC\"];\r\n\r\nexport const REFORGES = {\r\n    \"COMMON\": [\r\n        new Reforge(\"COMMON\", \"Silky\", 0, 5),\r\n        new Reforge(\"COMMON\", \"Hurtful\", 0, 4),\r\n        new Reforge(\"COMMON\", \"Bloody\", 1, 3, 1),\r\n        new Reforge(\"COMMON\", \"Forceful\", 4, 0),\r\n    ],\r\n    \"UNCOMMON\": [\r\n        new Reforge(\"UNCOMMON\", \"Silky\", 0, 6),\r\n        new Reforge(\"UNCOMMON\", \"Hurtful\", 0, 5),\r\n        new Reforge(\"UNCOMMON\", \"Bloody\", 1, 4, 1),\r\n        new Reforge(\"UNCOMMON\", \"Strange\", 1, 2, 2),\r\n        new Reforge(\"UNCOMMON\", \"Forceful\", 5, 0)\r\n    ],\r\n    \"RARE\": [\r\n        new Reforge(\"RARE\", \"Silky\", 0, 8),\r\n        new Reforge(\"RARE\", \"Hurtful\", 0, 7),\r\n        new Reforge(\"RARE\", \"Bloody\", 1, 5, 1),\r\n        new Reforge(\"RARE\", \"Forceful\", 7, 0)\r\n    ],\r\n    \"EPIC\": [\r\n        new Reforge(\"EPIC\", \"Silky\", 0, 10),\r\n        new Reforge(\"EPIC\", \"Hurtful\", 0, 10),\r\n        new Reforge(\"EPIC\", \"Bloody\", 2, 6, 2),\r\n        new Reforge(\"EPIC\", \"Strong\", 5, 5),\r\n        new Reforge(\"EPIC\", \"Strange\", 3, 1, 4),\r\n        new Reforge(\"EPIC\", \"Forceful\", 10, 0)\r\n    ],\r\n    \"LEGENDARY\": [\r\n        new Reforge(\"LEGENDARY\", \"Silky\", 0, 15),\r\n        new Reforge(\"LEGENDARY\", \"Hurtful\", 0, 15),\r\n        new Reforge(\"LEGENDARY\", \"Bloody\", 3, 9, 2),\r\n        new Reforge(\"LEGENDARY\", \"Strong\", 8, 8),\r\n        new Reforge(\"LEGENDARY\", \"Forceful\", 15, 0)\r\n    ],\r\n    \"MYTHIC\": [\r\n        new Reforge(\"MYTHIC\", \"Silky\", 0, 20),\r\n        new Reforge(\"MYTHIC\", \"Hurtful\", 0, 20),\r\n        new Reforge(\"MYTHIC\", \"Strong\", 12, 12),\r\n        new Reforge(\"MYTHIC\", \"Forceful\", 20, 0)\r\n    ],\r\n};\r\n\r\nexport function getReforge(rarity: string, name: string): Reforge {\r\n    return REFORGES[rarity].filter(reforge => reforge.name === name).pop();\r\n}","import {getReforge, PREPOPULATE, RARITIES, Reforge} from \"./reforges\";\r\nimport {TalismanCount} from \"./main\";\r\n\r\nexport interface Successors {\r\n    bestSuccessors: AccessoryBag[],\r\n    optimal: boolean\r\n}\r\n\r\nexport interface BaseStats {\r\n    dmg: number,\r\n    str: number,\r\n    cd: number,\r\n    atkSpd: number\r\n}\r\n\r\nexport class AccessoryBag {\r\n    talismans: any = {};\r\n\r\n    public constructor(tc: TalismanCount) {\r\n        tc.count.forEach((count, rarity) => {\r\n            let prepop = PREPOPULATE[\"Max Damage\"][rarity];\r\n\r\n            // Typescript is irrationally stupid\r\n            this.talismans[rarity] = [];\r\n            for (let i = 0; i < count; i++) {\r\n                let name = prepop[count % prepop.length];\r\n                this.talismans[rarity].push(getReforge(rarity, name));\r\n            }\r\n        });\r\n    }\r\n\r\n    public generateSuccessors(baseStats: BaseStats, moves: string[]): Successors {\r\n        let successors = [this];\r\n        for (let rarity in this.talismans) {\r\n            if (!this.talismans.hasOwnProperty(rarity)) {\r\n                continue;\r\n            }\r\n\r\n            let pivots = this.scanPivots(rarity);\r\n\r\n            pivots.flatMap(pivot => this.talismans[rarity][pivot].shiftWithMoves(moves)\r\n                .map(reforge => {\r\n                    let newBag = this.clone();\r\n\r\n                    newBag.talismans[rarity][pivot] = reforge;\r\n                    newBag.fixOrdering();\r\n\r\n                    return newBag;\r\n                }))\r\n                .forEach(successor => successors.push(successor));\r\n        }\r\n\r\n        console.log(successors);\r\n\r\n        successors.sort((a, b) => b.evaluate(baseStats).crit - a.evaluate(baseStats).crit);\r\n\r\n        for (let i = 0; i < successors.length; i++) {\r\n            if (successors[i] == this) {\r\n                successors = successors.slice(0, i + 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return {\r\n            bestSuccessors: successors,\r\n            optimal: successors[0] === this\r\n        }\r\n    }\r\n\r\n    scanPivots(rarity: string): number[] {\r\n        let pivots: number[] = [];\r\n\r\n        let reforges = this.talismans[rarity];\r\n        if (reforges.length > 0) {\r\n            pivots.push(0);\r\n            let last = pivots[0];\r\n\r\n            for (let i = 1; i < reforges.length; i++) {\r\n                if (last != pivots[i]) {\r\n                    last = pivots[i];\r\n                    pivots.push(i);\r\n                }\r\n            }\r\n        }\r\n\r\n        return pivots;\r\n    }\r\n\r\n    fixOrdering() {\r\n        for (let i in this.talismans) {\r\n            if (!this.talismans.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n\r\n            let reforges = this.talismans[i];\r\n\r\n            // The only requirement for this sorter is that it's deterministic and groups identical reforges together\r\n            // This is made under the assumption that cd \\in [0,99], str \\in [0,99] and atkspd \\in [0, 99]\r\n            reforges.sort((a, b) => (a.cd - b.cd) * 1e4 +\r\n                (a.str - b.str) * 1e2 +\r\n                a.atkspd * b.atkspd);\r\n        }\r\n    }\r\n\r\n    clone(): AccessoryBag {\r\n        let newBag = new AccessoryBag(new TalismanCount());\r\n\r\n        for (let rarity in this.talismans) {\r\n            if (!this.talismans.hasOwnProperty(rarity)) {\r\n                continue;\r\n            }\r\n\r\n            newBag.talismans[rarity] = this.talismans[rarity].slice(0);\r\n        }\r\n\r\n        return newBag;\r\n    }\r\n\r\n    public evaluate(baseStats: BaseStats): Damage {\r\n        let str = baseStats.str;\r\n        let cd = baseStats.cd;\r\n        let atkSpd = baseStats.atkSpd;\r\n\r\n        for (let i in this.talismans) {\r\n            if (!this.talismans.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n\r\n            this.talismans[i].forEach(reforge => {\r\n                str += reforge.str;\r\n                cd += reforge.cd;\r\n                atkSpd += reforge.atkSpd;\r\n            });\r\n        }\r\n\r\n        let std = (5 + baseStats.dmg + Math.floor(str / 5)) * (1 + str / 100);\r\n        let crit = std + std * (cd / 100);\r\n\r\n        return {\r\n            std: std,\r\n            crit: crit,\r\n            dps: (2 + 2 * Math.min(1, atkSpd / 100)) * crit\r\n        };\r\n    }\r\n\r\n    public toString() {\r\n        return RARITIES.map(rarity => {\r\n            let buffer = rarity + \":\\n\";\r\n            let collected = countReforgeNames(this.talismans[rarity]\r\n                .map(reforge => reforge.name));\r\n\r\n            for (let reforge in collected) {\r\n                if (collected.hasOwnProperty(reforge)) {\r\n                    buffer += \"\\t\" + reforge + \": \" + collected[reforge] + \"\\n\";\r\n                }\r\n            }\r\n\r\n            return buffer;\r\n        })\r\n            .join(\"\");\r\n    }\r\n\r\n    public aggregateReforges(): ReforgeSets[] {\r\n        return RARITIES.map(rarity => {\r\n            return {\r\n                rarity: rarity,\r\n                reforges: countReforgeNames(this.talismans[rarity]\r\n                    .map(reforge => reforge.name))\r\n            };\r\n        });\r\n    }\r\n}\r\n\r\nexport interface ReforgeSets {\r\n    rarity: string,\r\n    reforges: Map<string, number>\r\n}\r\n\r\nfunction countReforgeNames(names: string[]): Map<string, number> {\r\n    let map = new Map();\r\n\r\n    if (names.length > 0) {\r\n        let current = names[0];\r\n        let count = 0;\r\n\r\n        for (let name of names) {\r\n            if (name == current) {\r\n                count++;\r\n            } else {\r\n                map[current] = count;\r\n\r\n                current = name;\r\n                count = 1;\r\n            }\r\n        }\r\n\r\n        map[current] = count;\r\n    }\r\n\r\n    return map;\r\n}\r\n\r\nexport interface Damage {\r\n    std: number,\r\n    crit: number,\r\n    dps: number,\r\n}","import {AccessoryBag, BaseStats, ReforgeSets} from \"./accessoryBag\";\r\nimport {MOVE_SETS, RARITIES} from \"./reforges\";\r\n\r\nexport class TalismanCount {\r\n    public count: Map<string, number> = new Map();\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    for (let rarity of RARITIES) {\r\n        listenTo(rarity.toLowerCase() + \"-talisman-count\");\r\n    }\r\n\r\n    for (let stat of [\"dmg\", \"strength\", \"crit-dmg\", \"attack-speed\"]) {\r\n        listenTo(\"base-\" + stat);\r\n    }\r\n\r\n    for (let reforge of [\"silky\"]) {\r\n        listenTo(\"reforge-stone-\" + reforge);\r\n    }\r\n\r\n    updateMaxCD();\r\n});\r\n\r\nfunction listenTo(inputId: string) {\r\n    let el: HTMLInputElement = document.getElementById(inputId) as HTMLInputElement;\r\n\r\n    el.addEventListener(\"change\", e => updateMaxCD());\r\n}\r\n\r\nfunction updateMaxCD() {\r\n    let [bag, optimal] = evaluateMaxCD();\r\n\r\n    for (let reforgeSet of optimal) {\r\n        let container = document.getElementById(reforgeSet.rarity.toLowerCase() + \"-max-cd-reforge-guide\");\r\n        container.innerText = \"\";\r\n\r\n        for (let reforge in reforgeSet.reforges) {\r\n            if (!reforgeSet.reforges.hasOwnProperty(reforge)) {\r\n                continue;\r\n            }\r\n\r\n            let count = reforgeSet.reforges[reforge];\r\n\r\n            let reforgeEl = document.createElement(\"div\");\r\n            reforgeEl.innerText = reforge + \": \" + count;\r\n\r\n            container.appendChild(reforgeEl);\r\n        }\r\n    }\r\n}\r\n\r\nfunction evaluateMaxCD(): [AccessoryBag, ReforgeSets[]] {\r\n    let moves = MOVE_SETS.slice(0);\r\n    if ((document.getElementById(\"reforge-stone-silky\") as HTMLInputElement).checked) {\r\n        moves.push(\"Silky\");\r\n    }\r\n\r\n\r\n    let bag = new AccessoryBag(getTalismanCount());\r\n    let bs = getBaseStats();\r\n\r\n    for (let i = 0; i < 500; i++) {\r\n        let successors = bag.generateSuccessors(bs, moves);\r\n\r\n        console.log(\"Generation \" + i + \" results:\\n\\n\" + successors.bestSuccessors[0].toString());\r\n        bag = successors.bestSuccessors[Math.floor(Math.random() * successors.bestSuccessors.length)];\r\n\r\n        if (successors.optimal) {\r\n            console.log(\"Optimal solution found after \" + i + \" generations.\");\r\n            return [bag, bag.aggregateReforges()];\r\n        }\r\n    }\r\n\r\n    console.log(\"Took too long to compute, interrupting...\");\r\n    return undefined;\r\n}\r\n\r\nfunction getTalismanCount(): TalismanCount {\r\n    let count = new TalismanCount();\r\n\r\n    for (let rarity of RARITIES) {\r\n        let id = rarity.toLowerCase() + \"-talisman-count\";\r\n        let input = getValueAsUint(id);\r\n\r\n        if (input > 50) {\r\n            input = 50;\r\n            (document.getElementById(id) as HTMLInputElement).value = \"50\";\r\n        }\r\n\r\n        count.count.set(rarity, input)\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nfunction getValueAsUint(elementId: string): number {\r\n    let el = document.getElementById(elementId) as HTMLInputElement;\r\n    let v = el.value as unknown as number;\r\n\r\n    return v > 0 ? +v : 0;\r\n}\r\n\r\nfunction getBaseStats(): BaseStats {\r\n    return {\r\n        dmg: getValueAsUint(\"base-dmg\"),\r\n        str: getValueAsUint(\"base-strength\"),\r\n        cd: getValueAsUint(\"base-crit-dmg\"),\r\n        atkSpd: getValueAsUint(\"base-attack-speed\")\r\n    };\r\n}\r\n"]}